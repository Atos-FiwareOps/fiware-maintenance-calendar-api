import os
import maintenance_calendar
import unittest
import tempfile
import maintenance_calendar.views
import json

##class to testing the API call
class TestStringMethods(unittest.TestCase):

    ##The token should be generated by the FI-DASH application in order to obtain the roles of this user account
    token = 'Wgnl2qsxv9a4JIRO2YCBLxGfLK1saU'

    def auth_header(self):
        headers = {'X-Auth-Token': self.token, 'accept':'application/json'}
        return headers

    def maintenance_auth_access(self, url_auth, method):
        if 'GET' == method:
            response = self.app.get(url_auth, follow_redirects=True)
        elif 'POST' == method:
            response = self.app.post(url_auth, follow_redirects=True)
        elif 'DELETE' == method:
            response = self.app.delete(url_auth, follow_redirects=True)
        else:
            assert True, "Method not supported"

        assert response.status_code == 401, "The authentication is not well defined for the method %s and url %s" % (method, url_auth) 
        assert 'proper token' in response.data, "The message of the authentication is not well build for the method %s and url %s" % (method, url_auth)

    def setUp(self):
        self.db_fd, maintenance_calendar.app.config['DB_TEST_URI'] = tempfile.mkstemp()
        maintenance_calendar.app.config['TESTING'] = True
        self.app = maintenance_calendar.app.test_client()

    def tearDown(self):
        os.close(self.db_fd)
        os.unlink(maintenance_calendar.app.config['DB_TEST_URI'])

    def test_maintenance_auth_access_online(self):
        self.maintenance_auth_access('/api/v1', 'GET');

    def test_maintenance_on_line(self):
        response = self.app.get('/api/v1', follow_redirects=True, headers=self.auth_header())
        assert response.status_code == 200, "The component is not ready; the status code is %s" % str(response.status_code)
        if response.status_code == 200:
            assert 'Hello' in response.data, "The response of the online test is not build correctly"

    def test_maintenance_get_events(self):
        ##Test if the auth is applied
        url = '/api/v1/events'
        self.maintenance_auth_access(url, 'GET');

        ##Test if we obtain a list of events
        response = self.app.get(url, headers=self.auth_header(), content_type='application/json')
        assert response.status_code == 200, "The component is not ready; the status code is %s" % str(response.status_code)
        if response.status_code == 200:
            assert 'events' in response.data, "The response of the get events test is not build correctly"

    def test_maintenance_manage_events(self):
        ##Test if the auth is applied
        url = '/api/v1/events'
        self.maintenance_auth_access(url,'POST');

        request_body = "{\"location\": \"Trento\",\"summary\": \"Maintenace2 Node Trento\",\"description\": \"Test description Trento Maintenance\",\"dtend\": \"2015-12-28 20:45:00+0100\",\"dtstart\": \"2015-12-28 12:00:00+0100\"}"
        newEventId = ""
        
        ##Test if we can create, obtain and remove events
        response = self.app.post(url, data=request_body, headers=self.auth_header(), content_type='application/json')
        assert response.status_code == 201, "The component is not ready; the status code is %s" %  str(response.status_code)

        ##we test to recover the new event and remove it
        if (response.status_code == 201):
            newEvent = json.loads(response.data)
            assert newEvent["event"]["location"] == "Trento", "The new event is not well create it"

            newEventId = newEvent["event"]["uid"]

            ##Obtain the event
            urlNewEvent = url+'/'+newEventId
            self.maintenance_auth_access(urlNewEvent,'GET');

            response = self.app.get(urlNewEvent, headers=self.auth_header(), content_type='application/json')
            assert response.status_code == 200, "The component is not available; the status code is %s" %  str(response.status_code)
            recoveredEvent = json.loads(response.data)
            assert recoveredEvent["event"]["uid"] == newEventId, "The created event is not well recovered"

            #delete the newEvent
            self.maintenance_auth_access(urlNewEvent,'DELETE')
            response = self.app.delete(urlNewEvent, headers=self.auth_header(), content_type='application/json')
            assert response.status_code == 204, "The event is not deleted; the status code is %s" %  str(response.status_code)

    def test_maintenance_nodes(self):
        url = '/api/v1/nodes'
        self.maintenance_auth_access(url, 'GET');

        response = self.app.get(url, headers=self.auth_header(), content_type='application/json')
        assert response.status_code == 200, "The component is not ready; the status code is %s" % str(response.status_code)
        if response.status_code == 200:
            nodes = json.loads(response.data)
            existSpain2 = False
            for node in nodes["nodes"]:
                if node["id"]== 'Spain2':
                    existSpain2 = True
            assert existSpain2, "The response of the get nodes is not build correctly, since Spain2 is not included"

    def test_maintenance_nodes(self):
        url = '/api/v1/ics/maintenanceCalendarFiwareLab'
        response = self.app.get(url, headers=self.auth_header(), content_type='application/json')
        assert response.status_code == 200, "The component is not ready; the status code is %s" % str(response.status_code)
        if response.status_code == 200:
            assert 'VCALENDAR' in response.data, "The ICS file is not well recovered"


##TODO we need to introduce more test for the authorization actions (access with the Uptime Requester Role and test to connect to others nodes with the Infrastructure Owner Role), 
##nevertheless, we need to create different user credentials and obtain the token. Hence, it is necessary to be aligned with FI_DASH

if __name__ == '__main__':
    unittest.main()



